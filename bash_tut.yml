

ARR является массивом данных. С помощью строчки ${ARR[@]} мы обращаемся ко всем данным массива и добавляем его 
к переменной VAR_1. Если нам нужен конкретный элемент массива, то необходимо вместо символа "@" написать цифру - индекс элемента 
массива. Помните, что индексация в массивах идет от 0.


clear 
ARR=(1 2 3 "four" "five")
VAR_1="Count form 1 to 5: ${ARR[0]}"

echo $VAR_1 




Ниже приведены некоторые дополнительные операции с переменными:

${#VAR} - возвращает количество символов(длину) значения переменной.
${#array[@]} - размер массива.
${VAR:pos} - подстрока с позиции pos
${VAR:pos:len} - подстрока с позиции pos длинной length
${VAR?err_msg} - проверяет, если VAR определена, то ее значение возвращается, иначе печать err_msg
${!arr[@]} - получение индексов массива
arr[0]=value - перезапись первого элемента массива
arr+=(value) - присоединение к массиву значения
str=$(ls) - cохранение вывода команды ls в виде строки
${arr[@]:s:n} - получение элементов массива начиная с элемента с индексом s до элемента с индексом s+(n-1).





#!/bin/bash

clear

VAR_1=5
VAR_2=14

if [ $VAR_1 -lt $VAR_2 ]; then
echo "VAR_2 more than VAR_1"
elif [ $VAR_1 -gt $VAR_2 ]; then
echo "VAR_1 more than VAR_2"
else
echo "VAR_1 and VAR_2 are equal"
fi

Далее с помощью оператора "if" мы начинаем нашу условную конструкцию. После оператора  "if" должна идти команда. Как мы уже знаем, 
команда после выполнения передает значение об успешности выполнения (0 или 1). 0 соответствует успешному выполнению команды.
 Если команда выполнена успешно, тогда продолжает работу оператор "then". Система начинает выполнять команды, написанные 
 после оператора "then". Если команда завершается неуспешно, тогда все инструкции, относящиеся к данному "then" игнорируются 
 и происходит переход к оператору "elif". Elif это сокращение от else-if. Затем снова проверяется команда, между elif и then. 
 Если она также имеет статус выполнения 1, тогда выполняются все инструкции, написанные после else. Завершением условной 
 конструкции является оператор "fi".



 Оператор	           Значение
-gt	                 Больше (>)
-lt	                 Меньше (<)
-ge	                 Больше или равно (>=)
-le	                 Меньше или равно (<=)
-eq	                 Равно (==)
-ne	                 Не равно (!=)





#!/bin/bash

clear

VAR_1=2

if [[ $VAR_1 -lt 3 ]]; then
echo "success"
else
(( VAR_1 += 1 ))
echo $VAR_1
fi


Конструкция "[[]]" появилась в версии Bash 2.02 и является более предпочтительной, нежели команда "[]". 
Например, конструкция "[[]]" воспринимает логические операторы (&&, ||, >, <). Использование логических 
операторов в команде "[]" порождает ошибки.




