Kubernetis tutorial
#------------------------------
#
#       Основные понятия
#
#-------------------------------
pod #рабочая среда для контейнеров
1 pod = 1 container
#------------------------------
Взаимодействие модулей между собой реализует вид объектов Kubernetes — Service (сервис)#####.
service #  имеет статичные настройки для контейнеров
#------------------------------------
сервис бывает external and internal:
external - внешний URL application # https://my-app.com
ingress # балансировщик запросов внутри кластера k&s
#------------------------------------------------------------
config map and secret:
config map # внешняя конфигурация для вашего приложения
secret #компонент кубера для кредов base64 encoded format
#---------------------------------------------------------------------
volumes: # дата хранится снаружи кластера куба
        # дата может хранится локально, главное чтобы не кластере
        # подключается к кластеру куба

deployment: # несколько подов app, дата не конфигрурируется в деплое
# Объект Kubernetes, отвечающий за запуск и поддержание работы нужного количества модулей, называется 
Deployment:
#----------------------------------------------------------------------------
statefulSet # компонент для databases  несколько дб
#----------------------------------------------------------------------------------------
# 
#
#                    Основы архитектуры кубернетиса
#
#
#-----------------------------------------------------------------------------------------
3 master - 4 node
container runtime #должен быть на всех надох
kubelet #для получения команд от мастера
kuby proxy # для инет
kubectl edit deployment nginx-depl # откроется ямл манифест деплоймента
kubectl logs pod_name
kubectl discrabe pod [pod name]
kubectl exec -it pod_name --bin/bash







#-------------------------------------------------------------------
#
#
#
#                     Управление кластерами кубернетиса 
#
#
#
#--------------------------------------------------------------------
Подготовка к установке кубернетиса
setenforce 0 # отключить SELinux  
systemctl disable firewalld && systemctl stop firewalld
cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://yum.kubernetes.io/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF

yum install -y docker kubelet kubeadm kubectl kubernetes-cni
systemctl enable docker && systemctl start docker
systemctl enable kubelet && systemctl start kubelet
sysctl -w net.bridge.bridge-nf-call-iptables=1 # включить сетевой параметр 
echo "net.bridge.bridge-nf-call-iptables=1" > /etc/sysctl.d/k8s.conf # включить сетевой параметр 
swapoff -a && sed -i '/ swap / s/^/#/' /etc/fstab # отключить свап
Прописать DNS либо на сервере днс либо в host
192.168.64.138 master.k8s
192.168.64.139 node1.k8s
192.168.64.140 node2.k8s # на каждом узле кластера 

kubeadm init # на мастере 
kubeadm join --token # в выводе инит будет токен

 vim /etc/kubernetes/admin.conf #конфигурируем admin.conf для настройки kubectl под кластер

export KUBECONFIG=/etc/kubernetes/admin.conf

kubectl config set-cluster my-other-cluster # добавить кластер, если кластер уже есть с таким именем он перезапишется 
➥ --server=https://k8s.example.com:6443
➥ --certificate-authority=path/to/the/cafile

kubectl config set-credentials foo --username=foo --password=pass # добавить юзера 
kubectl config set-credentials foo --token=mysecrettokenXFDJIQ1234 #  авторизация по токену

kubectl config set-context some-context --cluster=my-other-cluster
➥ --user=foo --namespace=bar #  используется для создания нового контекста, связывающего кластер и созданного пользователя
kubectl config current-context # Имя текущего контекста namespace 
kubectl config set-context minikube --namespace=another-namespace #  изменить пространство имен

СОВЕТ. Для того чтобы легко переключаться между пространствами имен, опре-
делите такой псевдоним: alias kcd='kubectl config set-context $(kubectl config current-context) --namespace', 
после чего можно переключаться между пространствами имен с помощью kcd somenamespace.



















#----------------------------------------------------------------------------
#
#
#
#           Взаимодействие с кубером через API в терминале
#
#
#
#
#-------------------------------------------------------------------------------
для создания ресурса нужно сделать POST запрос на URL коллекции
для получения ресурса GET на URL конкретного ресурса
для изменения — использовать метод PATCH
а удаления — метод DELETE


apiVersion – версия API, которая вместе с типом объекта однозначно определяет конкретную схему объекта. 
Версия API нужна для развития схемы типа объекта. 
kind – тип объекта
metadata – метаданные 
name
labels, annotations
spec – спецификация желаемого состояния объекта
status - текущие состояние объекта


#!/bin/bash
kubectl proxy --port=8080 Спроксируем API Server на локальный порт 8080
#--------------------------------------------------------------
curl -s 127.0.0.1:8080/api/v1/nodes/$HOSTNAME/ | jq
curl -v -X POST -H "Content-Type: application/json" http://127.0.0.1:8080/api/v1/namespaces/default/pods -d@hello-service.json
#-----------------------------------------------------------
запустим инстанс сервиса в кластере. Для этого воспользуемся простейшим приложением на питоне, которое на / - отдает текст 
Hello world from {имя хоста}!. Образ контейнера хранится на dockerhub schetinikov/hello-app:v1.
curl -v -X POST -H "Content-Type: application/json" http://127.0.0.1:8080/api/v1/namespaces/default/pods -d@hello-service.json
посмотрим, что происходит #-------------------------------------
curl -s 127.0.0.1:8080/api/v1/events  | jq '.items[] | {message: .message, component: .source.component} | select(.message | index("hello"))'
curl -s 127.0.0.1:8080/api/v1/namespaces/default/pods/hello-demo | jq
curl -X DELETE 127.0.0.1:8080/api/v1/namespaces/default/pods/hello-demo
примерно минута и под будет удалён #-------------------------------------------------
curl 127.0.0.1:8080/api/v1/namespaces/default/pods/hello-demo | jq
























































































































