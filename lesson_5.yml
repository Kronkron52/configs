bash-скрипты
#!/bin/bash файл скрипта начинается
/usr/bin/env для других скриптов
#!/usr/bin/env python3
Scripts-example
#!/bin/bash
pwd
ls
echo 'Test'
free -h
###################
chmod +x script.sh
./script.sh
bash -x - выводит в поток, команды которые выполняются (debug)
bash -x scripts.sh > test выводит команды в скрипте


#!/bin/bash
foo=bar
echo $foo
#########################
#!/bin/bash
foo=$(ls)
echo $foo
###############################
#!/bin/bash
foo=$(ls)
echo \$foo  #Экранировать переменную
echo "echo $var"
выведет строку "echo" + содержимое переменной var
echo 'echo $var'
выведет строку "echo $var"
echo `echo $var`
############################
выведет содержимое переменной var
echo $0 - показывает имя скрипта
echo $# - показывает количество переданных аргументов
системные переменные
$HOME
$PATH и т.д

Условия
test
оператор проверки условий

if
условный оператор проверки результата условий
0=true
1=false

test -z -пустая ли переменная

test -e - существует ли файл

test -d - существует ли директория
test -f - существует ли файл и обычный ли он
test -eq -проверка на равенство
-gt - больше
-lt - меньше
-ge - больше или равно
############################
if <условие>
then
<действие при успехе>
else
<действие при неудаче>
fi
############################
Цикл for a in
выполнять действия для каждого элемента списка
for <список>
do
<действие для каждого элемента >
done
########################################
Цикл while
выполнять действие, пока выполняется условие

while <условие>
do
<действие для каждого элемента цикла>
done
#############################################3

until
выполняется, пока не выполнится условие
do
<>
done

##################################
for var in  1 2 3 4 5 6 7
do
echo "Var: $var"
done

for file in $(ls); do echo $file; done

IFS=$' '  переменная отвечает за символ разделение строк

IFS=$'\n'  перенос строки

###################################################
#!/bin/bash

DIRECTORY=.
REQUIRED_SIZE=10000
IFS=$'\n'

for file in $(ls -l) $DIRECTORY
do
 size=$(echo $file | awk '{print $5}')
 if (( size >= REQUIRED_SIZE ))
 then
  name=$( echo $file | awk '{print $9}')
  echo $name
fi
done
##########################################

 while read line
 do
 echo "Result = $line"
 done

 a=0; until [[ $a -gt 10 ]]; do echo $a; (( a++ )); done


########Function####################

Structura:

<name Function>()
{
    <commands>
    return <код возврата> - опционально
}

####################################################


#!bin/bash

COLOR_RED='\033[0:31m'
COLOR_DEFUULT='\033[0'

error()
{
 if [[ -n $1 ]]
 then
  message=$1
  else
   return 1
  fi

  echo -e "${COLOR_RED}${message}${COLOR_DEFUULT}" 1>&2

}
